Type
	1.1 프리미티브 : 프리미티브 유형에 액세스하면 해당 값에 직접 작업합니다. (자바 자료형 정리(Primitive Type), http://jdm.kr/blog/213) - 
		string, number, boolean, null, undefined, symbol
		const foo = 1;
		let bar = foo;
		bar = 9;

		console.log(foo, bar); // => 1, 9
		Symbols cannot be faithfully polyfilled, so they should not be used when targeting browsers/environments that don't support them natively.
			polyfill 설명 http://webdir.tistory.com/328
		
	2.2 컴플렉스 : 복잡한 유형에 액세스하면 해당 값에 대한 참조로 작업합니다.
		object, array, function
		const foo = [1, 2];
		const bar = foo;
		bar[0] = 9;

		console.log(foo[0], bar[0]); // => 9, 9

References
	es6 spec
	2.1 모든 참조에 const를 사용하십시오. var 사용하지 마십시오. eslint : prefer-const, no-const-assign
	Why? 이렇게하면 참조를 다시 할당 할 수 없으므로 버그가 발생하고 코드를 이해하기 어렵습니다.
		// bad
		var a = 1;
		var b = 2;

		// good
		const a = 1;
		const b = 2;
	
	es6 spec
	2.2 참조를 재 지정해야하는 경우 var 대신 let을 사용하십시오 eslint : no-var
	Why? 변수처럼 function-scoped가 아닌 block-scoped가되도록하자.
		// bad
		var count = 1;
		if (true) {
		  count += 1;
		}

		// good, use the let.
		let count = 1;
		if (true) {
		  count += 1;
		}
	
	es6 spec
	2.3 let과 const는 모두 block-scoped이다.
		// const and let only exist in the blocks they are defined in.
		{
		  let a = 1;
		  const b = 1;
		}
		console.log(a); // ReferenceError
		console.log(b); // ReferenceError
		
Objects
	3.1 객체 생성을 위해 리터럴 구문을 사용합니다. eslint: no-new-object
		// bad
		const item = new Object();

		// good
		const item = {};
		
	3.2 동적 속성 이름을 사용하여 개체를 만들 때 계산 된 속성 이름을 사용합니다.	
	Why? 그것들을 사용하면 한 장소에서 객체의 모든 속성을 정의 할 수 있습니다.	
		function getKey(k) {
			return `a key named ${k}`;
		}

		// bad
		const obj = {
			id: 5,
			name: 'San Francisco',
		};
		obj[getKey('enabled')] = true;

		// good
		const obj = {
			id: 5,
			name: 'San Francisco',
			[getKey('enabled')]: true,
		};
		
	3.3 Object method를 사용한다. eslint: object-shorthand
		// bad
		const atom = {
			value: 1,

			addValue: function (value) {
				return atom.value + value;
			},
		};

		// good
		const atom = {
			value: 1,

			addValue(value) {
				return atom.value + value;
			},
		};
	
	3.4 속성 값 단축을 사용하십시오. eslint: object-shorthand
	Why? 그것은 쓰고 설명하는 것이 더 짧습니다.
		const lukeSkywalker = 'Luke Skywalker';

		// bad
		const obj = {
			lukeSkywalker: lukeSkywalker,
		};

		// good
		const obj = {
			lukeSkywalker,
		};
	
	3.5 개체 선언의 시작 부분에 속기 속성을 그룹화하십시오.
	Why? 속기를 사용하는 속성을 쉽게 알 수 있습니다.
		const anakinSkywalker = 'Anakin Skywalker';
		const lukeSkywalker = 'Luke Skywalker';

		// bad
		const obj = {
			episodeOne: 1,
			twoJediWalkIntoACantina: 2,
			lukeSkywalker,
			episodeThree: 3,
			mayTheFourth: 4,
			anakinSkywalker,
		};

		// good
		const obj = {
			lukeSkywalker,
			anakinSkywalker,
			episodeOne: 1,
			twoJediWalkIntoACantina: 2,
			episodeThree: 3,
			mayTheFourth: 4,
		};
	
	3.6 유효하지 않은 식별자 인 속성들만 인용한다. eslint: quote-props
	Why? 일반적으로 우리는 주관적으로 읽기 쉽다고 생각합니다. 구문 강조를 향상시키고 많은 JS 엔진에서보다 쉽게 최적화 할 수 있습니다.
		// bad
		const bad = {
			'foo': 3,
			'bar': 4,
			'data-blah': 5,
		};

		// good
		const good = {
			foo: 3,
			bar: 4,
			'data-blah': 5,
		};
		
	3.7 hasOwnProperty, propertyIsEnumerable 및 isPrototypeOf와 같은 Object.prototype 메소드를 직접 호출하지 마십시오.
	Why? 이러한 메소드는 해당 객체의 속성에 따라 음영 처리 될 수 있습니다 (예 : {hasOwnProperty : false}). 또는 객체가 null 객체 (Object.create (null)) 일 수 있습니다.
		// bad
		console.log(object.hasOwnProperty(key));

		// good
		console.log(Object.prototype.hasOwnProperty.call(object, key));

		// best
		const has = Object.prototype.hasOwnProperty; // cache the lookup once, in module scope.
		/* or */
		import has from 'has'; // https://www.npmjs.com/package/has
		// ...
		console.log(has.call(object, key));
	
	3.8 Object보다는 Object spread 연산자를 선호합니다. 얕은 복사 객체에 할당하십시오. object rest 연산자를 사용하여 특정 속성이 생략 된 새 객체를 가져옵니다.
		// very bad
		const original = { a: 1, b: 2 };
		const copy = Object.assign(original, { c: 3 }); // this mutates `original` ಠ_ಠ
		delete copy.a; // so does this

		// bad
		const original = { a: 1, b: 2 };
		const copy = Object.assign({}, original, { c: 3 }); // copy => { a: 1, b: 2, c: 3 }

		// good
		const original = { a: 1, b: 2 };
		const copy = { ...original, c: 3 }; // copy => { a: 1, b: 2, c: 3 }

		const { a, ...noA } = copy; // noA => { b: 2, c: 3 }
	
Arrays
	4.1 배열을 만들 때 리터럴 구문을 사용하세요. eslint rules: no-array-constructor.
		// bad
		const items = new Array();

		// good
		const items = [];
		
	4.2 배열에 항목을 직접 대체하지 말고 Array#push를 사용하세요.
		const someStack = [];

		// bad
		someStack[someStack.length] = 'abracadabra';

		// good
		someStack.push('abracadabra');
		
	4.3 배열을 복사하는 경우, 배열의 확장 연산자인 ...을 사용하세요.
		// bad
		const len = items.length;
		const itemsCopy = [];
		let i;

		for (i = 0; i < len; i += 1) {
		  itemsCopy[i] = items[i];
		}

		// good
		const itemsCopy = [...items];
		
	4.4 Array-Like 객체를 배열로 변환하려면 Array#from을 사용하세요.
		Array.ffrom()
		https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from
		
		const foo = document.querySelectorAll('.foo');

		// good
		const nodes = Array.from(foo);

		// best
		const nodes = [...foo];
		
	4.5 iterables 매핑을 위해 확장연산자(...) 대신 Array.from을 사용하십시오. 왜냐하면 중간 배열을 만들지 않기 때문입니다.
		// bad
		const baz = [...foo].map(bar);

		// good
		const baz = Array.from(foo, bar);
	
	4.6 배열 메소드 콜백에서 return 문을 사용하십시오. 함수 본문에 부작용이없는 표현식을 반환하는 단일 문으로 구성되어 있으면 반환을 생략해도됩니다.
		// good
		[1, 2, 3].map((x) => {
		  const y = x + 1;
		  return x * y;
		});

		// good
		[1, 2, 3].map(x => x + 1);

		// bad - 반환 값이 없다는 것은 첫번째 반복 후에`acc`가 정의되지 않음을 의미합니다.
		Array.prototype.reduce()
		https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
		[[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) => {
		  const flatten = acc.concat(item);
		  acc[index] = flatten;
		});

		// good
		[[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) => {
		  const flatten = acc.concat(item);
		  acc[index] = flatten;
		  return flatten;
		});

		// bad
		inbox.filter((msg) => {
		  const { subject, author } = msg;
		  if (subject === 'Mockingbird') {
			return author === 'Harper Lee';
		  } else {
			return false;
		  }
		});

		// good
		inbox.filter((msg) => {
		  const { subject, author } = msg;
		  if (subject === 'Mockingbird') {
			return author === 'Harper Lee';
		  }

		  return false;
		});
		
	4.7 배열에 여러 줄이있는 경우 열기 후 및 닫기 전에 배열 줄 바꿈을 하세요.
		// bad
		const arr = [
		  [0, 1], [2, 3], [4, 5],
		];

		const objectInArray = [{
		  id: 1,
		}, {
		  id: 2,
		}];

		const numberInArray = [
		  1, 2,
		];

		// good
		const arr = [[0, 1], [2, 3], [4, 5]];

		const objectInArray = [
		  {
			id: 1,
		  },
		  {
			id: 2,
		  },
		];

		const numberInArray = [
		  1,
		  2,
		];
	
Modules	
	10.1 비표준 모듈 시스템이 아니라면 항상 (import/export) 를 사용하세요. 이렇게 함으로써 원하는 모듈 시스템에 언제든지 트랜스파일(Transpile) 할 수 있습니다.
	Why? 모듈은 곧 미래입니다. 미래를 선점하고 애용합시다.
		// bad
		const AirbnbStyleGuide = require('./AirbnbStyleGuide');
		module.exports = AirbnbStyleGuide.es6;

		// ok
		import AirbnbStyleGuide from './AirbnbStyleGuide';
		export default AirbnbStyleGuide.es6;

		// best
		import { es6 } from './AirbnbStyleGuide';
		export default es6;
		
	10.2 와일드카드를 이용한 가져오기는 사용하지 않습니다.
	Why? single default export인 것에 주의할 필요가 있기 때문입니다.
		// bad
		import * as AirbnbStyleGuide from './AirbnbStyleGuide';

		// good
		import AirbnbStyleGuide from './AirbnbStyleGuide';
		
	10.3 import 문에서 직접 추출(Export)하지 않습니다.
		// bad
		// filename es6.js
		export { es6 as default } from './AirbnbStyleGuide';

		// good
		// filename es6.js
		import { es6 } from './AirbnbStyleGuide';
		export default es6;

	10.4 한 위치의 경로에서만 가져 오기. eslint : no-duplicate-imports
	Why? 동일한 경로에서 여러 줄을 가져 오면 코드를 유지 관리하기가 더 어려워 질 수 있습니다.
		// bad
		import foo from 'foo';
		// … some other imports … //
		import { named1, named2 } from 'foo';

		// good
		import foo, { named1, named2 } from 'foo';

		// good
		import foo, {
			named1,
			named2,
		} from 'foo';
		
	10.5 변경 가능한 바인딩을 export하지 않는다. eslint: import/no-mutable-exports
	Why? 변경되는것은 일반적으로 피해야하지만 특히 변경가능한 바인딩을 export 할 때는 피해야합니다. 일부 특수한 경우에는이 기술이 필요할 수도 있지만, 일반적으로 상수 참조 만 내 보내야합니다.
		// bad
		let foo = 3;
		export { foo };

		// good
		const foo = 3;
		export { foo };
	
	10.6 single export 모듈은 명명 된 내보내기에 비해 default export 를 선호합니다. eslint : import / prefer-default-export
	Why? 한 가지만 내보내는 더 많은 파일을 장려하기 위해 가독성과 유지 관리 용이성이 향상되었습니다.
		// bad
		export function foo() {}

		// good
		export default function foo() {}
		
	10.7 모든 import문은 non-import statements 보다 위에 써 넣으세요. eslint: import/first
	Why? Since imports are hoisted, keeping them all at the top prevents surprising behavior.
		// bad
		import foo from 'foo';
		foo.init();

		import bar from 'bar';

		// good
		import foo from 'foo';
		import bar from 'bar';

		foo.init();
		
	10.8 여러줄 import는 여러줄 배열이나 개체 리터럴처럼 들여쓰기 되어야 합니다.
	Why? 중괄호는 다른 모든 중괄호 블록과 동일한 들여 쓰기 규칙을 따르고 후행 쉼표도 마찬가지입니다.
		// bad
		import {longNameA, longNameB, longNameC, longNameD, longNameE} from 'path';

		// good
		import {
			longNameA,
			longNameB,
			longNameC,
			longNameD,
			longNameE,
		} from 'path';
	
	10.9 모듈 import 문에서 Webpack loader 문법을 허용하지 않는다. eslint: import/no-webpack-loader-syntax
	Why? import 에서 Webpack 구문을 사용하면 코드가 모듈 묶음 처리기에 연결되므로, webapck.config.js 에 우선권을 주게 된다.
		// bad
		import fooSass from 'css!sass!foo.scss';
		import barCss from 'style!css!bar.css';

		// good
		import fooSass from 'foo.scss';
		import barCss from 'bar.css';